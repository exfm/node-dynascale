#!/usr/bin/env node
"use strict";

var when = require('when'),
	sequence = require('sequence'),
	aws = require('plata'),
	AWS = require('aws-sdk'),
	getConfig = require('junto'),
	nconf = require('nconf'),
	util = require('util');

var config,
	dynamo,
	tableInfo = {};

nconf.file({'file': 'config.json'});

getConfig('development').then(function(c){
	config = c;
	aws.connect(config.aws);
});

aws.onConnected(function(){

	AWS.config.update({accessKeyId: config.aws.key, secretAccessKey: config.aws.secret});
	AWS.config.update({region: 'us-east-1'});
	dynamo = new AWS.DynamoDB();

	sequence(this).then(function(next){
		when.all(nconf.get('tables').map(function(table){
			var d = when.defer();
			dynamo.client.describeTable({
				'TableName': table
			}).always(function (resp) {
				// console.log(resp.data, resp.error);
				tableInfo[resp.data.Table.TableName] = {
					'ProvisionedThroughput': {
						'Read': resp.data.Table.ProvisionedThroughput.ReadCapacityUnits,
						'Write': resp.data.Table.ProvisionedThroughput.WriteCapacityUnits
					}
				};
				d.resolve();
			});
			return d.promise;
		})).then(next);
	}).then(function(next){
		var timeRangeMinutes = 30,
			intervalInMinutes = 1,
			startTime = new Date(new Date().getTime() - 1000*60*timeRangeMinutes),
			endTime = new Date(),
			statistics = {
				'Average': '1'
			};

		when.all(Object.keys(tableInfo).map(function(tableName){
			var d = when.defer();
			aws.cloudWatch.getMetricStatistics('AWS/DynamoDB', 'ConsumedReadCapacityUnits',
				intervalInMinutes*60, startTime.toISOString(), endTime.toISOString(),
				statistics, 'Count', {
					'TableName': tableName
				}).then(function(data){
					console.log(JSON.stringify(data, null, 4));
					d.resolve();
				});
			return d.promise;
		})).then(next);
	});
});