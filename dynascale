#!/usr/bin/env node
"use strict";

var when = require('when'),
	sequence = require('sequence'),
	aws = require('plata'),
	AWS = require('aws-sdk'),
	getConfig = require('junto'),
	nconf = require('nconf'),
	util = require('util');

var config,
	dynamo,
	tableInfo = {},
	datapoints;

nconf.file({'file': 'config.json'});

getConfig('development').then(function(c){
	config = c;
	aws.connect(config.aws);
});

checkThroughput();
setInterval(checkThroughput, 10000);

// Run with a setInterval for every 5 minutes
// Get CloudWatch data for the last 30 minutes
// If levels for any metric have been about 70% for
// more than 5 consecutive datapoints, trigger scaling

function checkThroughput(){
	aws.onConnected(function(){
		AWS.config.update({accessKeyId: config.aws.key, secretAccessKey: config.aws.secret});
		AWS.config.update({region: 'us-east-1'});
		dynamo = new AWS.DynamoDB();

		sequence(this).then(function(next){
			when.all(nconf.get('tables').map(function(table){
				var d = when.defer();
				dynamo.client.describeTable({
					'TableName': table
				}).always(function (res) {
					tableInfo[res.data.Table.TableName] = {
						'ProvisionedThroughput': {
							'Read': res.data.Table.ProvisionedThroughput.ReadCapacityUnits,
							'Write': res.data.Table.ProvisionedThroughput.WriteCapacityUnits
						}
					};
					d.resolve();
				});
				return d.promise;
			})).then(next);
		}).then(function(next){
			var timeRangeMinutes = 120,
				startTime = new Date(new Date().getTime() - 1000*60*timeRangeMinutes),
				endTime = new Date();
			when.all(Object.keys(tableInfo).map(function(tableName){
				var d = when.defer();
				getThroughputStatistics(tableName,
					'write', startTime, endTime).then(function(){
						getThroughputStatistics(tableName,
							'read', startTime, endTime).then(d.resolve);
					});
				return d.promise;
			})).then(next);
		}).then(function(next){
			console.log('done.');
		});
	});
}

function increaseThroughput(tableName, newThroughput){
	var d = when.defer();
	dynamo.client.updateTable({
		'TableName': tableName,
		'ProvisionedThroughput': newThroughput
	}).always(function (res) {
		if (!res.error){
			return d.reject();
		}
		return d.resolve();
	});
	return d.promise;
}

function getThroughputStatistics(tableName, action, startTime, endTime){
	var d = when.defer(),
		metrics = {
			'write': 'ConsumedWriteCapacityUnits',
			'read': 'ConsumedReadCapacityUnits'
		};

	aws.cloudWatch.getMetricStatistics('AWS/DynamoDB', metrics[action],
		300, startTime.toISOString(), endTime.toISOString(),{
			'Sum': '1'
		}, 'Count', {
			'TableName': tableName
		}).then(function(data){
			datapoints = data.getMetricStatisticsResponse.getMetricStatisticsResult.datapoints;
			if (datapoints !== undefined){
				datapoints.map(function(pnt){
					var consumed = (pnt.sum/300),
						max = tableInfo[tableName].ProvisionedThroughput.Write;
					console.log(tableName, ' (' + action + '): ', (consumed/max)*100+'% ('+pnt.timestamp+')');
				});
			}
			d.resolve();
		});
	return d.promise;
}
